#include <stdio.h>
#include <stdlib.h>
#include "tree.h"
extern FILE *output1;
extern FILE *output2;
extern FILE *output3;


Tnode* createNode(int id, int width, int height){
   Tnode* n = (Tnode*) calloc(1, sizeof(Tnode));
   n->id = id;
   n->x = 0;
   n->y = 0;
   n->width = width;
   n->height = height;
   return n;
}

int isMax(int n1, int n2){
   if(n1 > n2){
      return n1;
   } else{
      return n2;
   }
}

void postorder(Tnode *node)
{
   int max;
   if (node == NULL) 
      return;
   postorder(node->left);
   postorder(node->right);
   if(node->id == 86 || node->id == 72){
      if(node->id == 72){
         max = isMax(node->right->width, node->left->width);
         node->width = max;
         node->height = node->right->height + node->left->height;
      } else if(node->id == 86){
         max = isMax(node->right->height, node->left->height);
         node->height = max;
         node->width = node->right->width + node->left->width;
      }
      fprintf(output2, "%c(%d,%d)\n", node->id, node->width, node->height);
   } else {
      fprintf(output2, "%d(%d,%d)\n", node->id, node->width, node->height);
   }
}

void preorderCoordinates(Tnode *node){
   if (node == NULL) 
      return;
   if(node->id != 86 && node->id != 72){
      fprintf(output3, "%d((%d,%d)(%d,%d))\n", node->id, node->width, node->height, node->x, node->y);
   } 
   preorderCoordinates(node->left);
   preorderCoordinates(node->right);
}

void preorder(Tnode *node)
{
   if (node == NULL) 
      return;
   if(node->id == 86 || node->id == 72){
      fprintf(output1, "%c\n", node->id);
   } else {
      fprintf(output1, "%d(%d,%d)\n", node->id, node->width, node->height);
   }
   preorder(node->left);
   preorder(node->right);
}

void Destroy_tree(Tnode *node)
{
   if (node == NULL)
      return;
   Destroy_tree(node->left);
   Destroy_tree(node->right);
   free(node);
}

